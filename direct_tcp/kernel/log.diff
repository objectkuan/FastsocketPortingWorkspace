diff --git a/kernel/include/linux/kernel.h b/kernel/include/linux/kernel.h
index 1cfe301..cb2fd14 100644
--- a/kernel/include/linux/kernel.h
+++ b/kernel/include/linux/kernel.h
@@ -24,6 +24,9 @@
 extern const char linux_banner[];
 extern const char linux_proc_banner[];
 
+//#define FPRINTK(msg, args...) printk(KERN_DEBUG "Fastsocket [CPU%d][PID-%d] %s:%d\t" msg, smp_processor_id(), current->pid, __FUNCTION__, __LINE__, ## args)
+#define FPRINTK(msg, args...) 
+
 #define USHORT_MAX	((u16)(~0U))
 #define SHORT_MAX	((s16)(USHORT_MAX>>1))
 #define SHORT_MIN	(-SHORT_MAX - 1)
diff --git a/kernel/include/linux/skbuff.h b/kernel/include/linux/skbuff.h
index 17a87cd..71b4eb4 100644
--- a/kernel/include/linux/skbuff.h
+++ b/kernel/include/linux/skbuff.h
@@ -332,10 +332,12 @@ struct sk_buff {
 	struct sk_buff		*prev;
 
 	struct sock		*sk;
+	struct sock		*peek_sk;
 	ktime_t			tstamp;
 	struct net_device	*dev;
 
 	unsigned long		_skb_dst;
+	struct dst_entry	*sock_dst;
 #ifdef CONFIG_XFRM
 	struct	sec_path	*sp;
 #endif
diff --git a/kernel/include/net/dst.h b/kernel/include/net/dst.h
index 5a900dd..09c2ad0 100644
--- a/kernel/include/net/dst.h
+++ b/kernel/include/net/dst.h
@@ -16,6 +16,7 @@
 #include <net/neighbour.h>
 #include <asm/processor.h>
 
+
 /*
  * 0 - no debugging messages
  * 1 - rare events and bugs (default)
@@ -156,6 +157,10 @@ static inline void dst_hold(struct dst_entry * dst)
 	 */
 	BUILD_BUG_ON(offsetof(struct dst_entry, __refcnt) & 63);
 	atomic_inc(&dst->__refcnt);
+	//FPRINTK("Hold dst 0x%p[%u]\n", dst, atomic_read(&dst->__refcnt));
+	////printk(KERN_DEBUG "Fastsocket [CPU%d][PID-%d] %s:%d\t Hold dst 0x%p[%u]\n", smp_processor_id(), current->pid, __FUNCTION__, __LINE__, dst, atomic_read(&dst->__refcnt));
+	//printk(KERN_DEBUG "Fastsocket [CPU%d] %s: Hold dst 0x%p[%u]\n", smp_processor_id(), __FUNCTION__, dst, atomic_read(&dst->__refcnt));
+	//WARN_ON(1);
 }
 
 static inline void dst_use(struct dst_entry *dst, unsigned long time)
@@ -168,16 +173,28 @@ static inline void dst_use(struct dst_entry *dst, unsigned long time)
 static inline
 struct dst_entry * dst_clone(struct dst_entry * dst)
 {
-	if (dst)
+	if (dst) {
 		atomic_inc(&dst->__refcnt);
+		//FPRINTK("Clone dst 0x%p[%u]\n", dst, atomic_read(&dst->__refcnt));
+		//printk(KERN_DEBUG "Fastsocket [CPU%d] %s: Clone dst 0x%p[%u]\n", smp_processor_id(), __FUNCTION__, dst, atomic_read(&dst->__refcnt));
+		//WARN_ON(1);
+	}
 	return dst;
 }
 
 extern void dst_release(struct dst_entry *dst);
 static inline void skb_dst_drop(struct sk_buff *skb)
 {
-	if (skb->_skb_dst)
+	//printk(KERN_DEBUG "Fastsocket [CPU%d] %s: skb 0x%p, _skb_dst 0x%p, sock_dst 0x%p\n", smp_processor_id(), __FUNCTION__, skb, (void *)skb->_skb_dst, skb->sock_dst);
+	//if (skb->sock_dst) {
+		//printk(KERN_DEBUG "Fastsocket [CPU%d] %s: Skb 0x%p has stored socket dst 0x%p[%u]\n", smp_processor_id(), __FUNCTION__, skb, skb->sock_dst, atomic_read(&skb->sock_dst->__refcnt));
+	//	return;
+	//}
+	if (!skb->sock_dst && skb->_skb_dst) {
+	//if (skb->_skb_dst) {
+		//printk(KERN_DEBUG "Fastsocket [CPU%d] %s: Skb 0x%p drop dst 0x%p[%u]\n", smp_processor_id(), __FUNCTION__, skb, skb_dst(skb), atomic_read(&skb_dst(skb)->__refcnt));
 		dst_release(skb_dst(skb));
+	}
 	skb->_skb_dst = 0UL;
 }
 
diff --git a/kernel/include/net/inet_hashtables.h b/kernel/include/net/inet_hashtables.h
index 74c07f1..a66d41a 100644
--- a/kernel/include/net/inet_hashtables.h
+++ b/kernel/include/net/inet_hashtables.h
@@ -414,7 +414,8 @@ static inline struct sock *__inet_lookup_skb(struct inet_hashinfo *hashinfo,
 	struct sock *sk;
 	const struct iphdr *iph = ip_hdr(skb);
 
-	if (unlikely(sk = skb_steal_sock(skb)))
+	//if (unlikely(sk = skb_steal_sock(skb)))
+	if ((sk = skb_steal_sock(skb)))
 		return sk;
 	else
 		return __inet_lookup(dev_net(skb_dst(skb)->dev), hashinfo,
diff --git a/kernel/include/net/sock.h b/kernel/include/net/sock.h
index a20ca0e..fe1fdf4 100644
--- a/kernel/include/net/sock.h
+++ b/kernel/include/net/sock.h
@@ -245,6 +245,7 @@ struct sock {
 	} sk_backlog;
 	wait_queue_head_t	*sk_sleep;
 	struct dst_entry	*sk_dst_cache;
+	struct dst_entry	*sk_rcv_dst;
 #ifdef CONFIG_XFRM
 	struct xfrm_policy	*sk_policy[2];
 #endif
@@ -554,6 +555,7 @@ enum sock_flags {
 	SOCK_TIMESTAMPING_SYS_HARDWARE, /* %SOF_TIMESTAMPING_SYS_HARDWARE */
 	SOCK_RXQ_OVFL,
 	SOCK_ZEROCOPY, /* buffers from userspace */
+	SOCK_DIRECT_TCP, /* bypass ip layer when receive skb */
 };
 
 static inline void sock_copy_flags(struct sock *nsk, struct sock *osk)
@@ -1193,6 +1195,8 @@ static inline void sock_put(struct sock *sk)
 {
 	if (atomic_dec_and_test(&sk->sk_refcnt))
 		sk_free(sk);
+
+	FPRINTK("Release socket 0x%p[%u]\n", sk, atomic_read(&sk->sk_refcnt));
 }
 
 extern int sk_receive_skb(struct sock *sk, struct sk_buff *skb,
@@ -1690,9 +1694,14 @@ static inline void sk_change_net(struct sock *sk, struct net *net)
 
 static inline struct sock *skb_steal_sock(struct sk_buff *skb)
 {
+	if (skb->peek_sk) {
+		FPRINTK("Skb 0x%p has set socket 0x%p\n", skb, skb->peek_sk);
+		return skb->peek_sk;
+	}
+
 	if (unlikely(skb->sk)) {
 		struct sock *sk = skb->sk;
-
+			
 		skb->destructor = NULL;
 		skb->sk = NULL;
 		return sk;
diff --git a/kernel/net/core/dev.c b/kernel/net/core/dev.c
index 6dc014a..e5e8955 100644
--- a/kernel/net/core/dev.c
+++ b/kernel/net/core/dev.c
@@ -139,6 +139,8 @@
 #include <net/inet_hashtables.h>
 #include <net/tcp.h>
 
+//#define DPRINTK(msg, args...) printk(KERN_DEBUG "Fastsocket [CPU%d][PID-%d] %s:%d\t" msg, smp_processor_id(), current->pid, __FUNCTION__, __LINE__, ## args);
+
 /* Instead of increasing this, you should create a hash table. */
 #define MAX_GRO_SKBS 8
 
@@ -2870,7 +2872,7 @@ static int netif_deliver_cpu(unsigned short dport)
 
 #define RESERVED_SERVICE_PORT	1024
 
-static int netif_deliver_skb(struct sk_buff *skb)
+static int get_rfd_cpu(struct sk_buff *skb)
 {
 	if (skb->protocol != htons(ETH_P_IP))
 		return -1;
@@ -2931,13 +2933,63 @@ static int netif_deliver_skb(struct sk_buff *skb)
 int enable_receive_flow_deliver = 0;
 EXPORT_SYMBOL(enable_receive_flow_deliver);
 
+static void netif_direct_tcp(struct sk_buff *skb)
+{
+	if (skb->protocol != htons(ETH_P_IP))
+		return;
+
+	if (pskb_may_pull(skb, sizeof(struct iphdr))) {
+		struct iphdr *iph = (struct iphdr *)skb->data;
+		int iphl = iph->ihl;
+		u8 ip_proto = iph->protocol;
+		
+		if (ip_proto != IPPROTO_TCP)
+			return;
+
+		if (pskb_may_pull(skb, (iphl * 4) + sizeof(struct tcphdr))) {
+			struct tcphdr *th = (struct tcphdr *)(skb->data + (iphl * 4));
+			struct sock *sk;
+
+			//sk = __inet_lookup_established(&init_net, &tcp_hashinfo, 
+			//		iph->saddr, th->source, iph->daddr, ntohs(th->dest), 
+			//		skb->dev->ifindex);
+			sk = __inet_lookup(&init_net, &tcp_hashinfo, iph->saddr, th->source, 
+					iph->daddr, th->dest, skb->dev->ifindex);
+			if (sk) {
+				if (sock_flag(sk, SOCK_DIRECT_TCP)) {
+					FPRINTK("Skb 0x%p[:%u] hit DIRECT_TCP socket 0x%p[:%u]\n", skb, ntohs(th->dest), sk, inet_sk(sk)->num);
+					if(sk->sk_rcv_dst) {
+						skb_dst_set(skb, sk->sk_rcv_dst);
+						skb->sock_dst = sk->sk_rcv_dst;
+						FPRINTK("Direct TCP socket 0x%p has dst record 0x%p[%u]\n", sk, sk->sk_rcv_dst, atomic_read(&sk->sk_rcv_dst->__refcnt));
+					} else {
+						FPRINTK("Direct TCP socket 0x%p has not dst record\n", sk);
+					}
+					skb->peek_sk = sk;
+					FPRINTK("Store socket 0x%p in skb 0x%p\n", sk, skb);
+				} else {
+					sock_put(sk);
+					FPRINTK("Skb 0x%p[:%u] hit common socket 0x%p[:%u]\n", skb,ntohs(th->dest), sk, inet_sk(sk)->num);
+				}
+			}
+		}
+	}
+}
+
+int enable_direct_tcp = 0;
+EXPORT_SYMBOL(enable_direct_tcp);
+
 int netif_receive_skb(struct sk_buff *skb)
 {
 	struct rps_dev_flow voidflow, *rflow = &voidflow;
 	int cpu, ret;
 
+
+	if (enable_direct_tcp)
+		netif_direct_tcp(skb);
+
 	if (enable_receive_flow_deliver)
-		cpu = netif_deliver_skb(skb);
+		cpu = get_rfd_cpu(skb);
 	else
 		cpu = get_rps_cpu(skb->dev, skb, &rflow);
 
diff --git a/kernel/net/core/dst.c b/kernel/net/core/dst.c
index cb1b348..b7e58e2 100644
--- a/kernel/net/core/dst.c
+++ b/kernel/net/core/dst.c
@@ -269,6 +269,8 @@ void dst_release(struct dst_entry *dst)
 
 		smp_mb__before_atomic_dec();
                newrefcnt = atomic_dec_return(&dst->__refcnt);
+	       FPRINTK("Release dst 0x%p[%u]\n", dst, atomic_read(&dst->__refcnt));
+	       //WARN_ON(1);
                WARN_ON(newrefcnt < 0);
 	}
 }
diff --git a/kernel/net/core/skbuff.c b/kernel/net/core/skbuff.c
index dc4a95c..6fb9aaf 100644
--- a/kernel/net/core/skbuff.c
+++ b/kernel/net/core/skbuff.c
@@ -547,6 +547,8 @@ static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 	new->network_header	= old->network_header;
 	new->mac_header		= old->mac_header;
 	skb_dst_set(new, dst_clone(skb_dst(old)));
+	new->sock_dst		= old->sock_dst;
+	new->peek_sk		= old->peek_sk;
 	new->rxhash		= old->rxhash;
 #ifdef CONFIG_XFRM
 	new->sp			= secpath_get(old->sp);
diff --git a/kernel/net/core/sock.c b/kernel/net/core/sock.c
index 0db6c33..b17f8e3 100644
--- a/kernel/net/core/sock.c
+++ b/kernel/net/core/sock.c
@@ -1024,6 +1024,8 @@ static struct sock *sk_prot_alloc(struct proto *prot, gfp_t priority,
 		 */
 		sk->sk_prot_creator = prot;
 		sk_tx_queue_clear(sk);
+		sk->sk_rcv_dst = NULL;
+		FPRINTK("Initiate dst on socket 0x%p[:%u]\n", sk, inet_sk(sk)->num);
 	}
 
 	return sk;
@@ -1103,6 +1105,13 @@ static void __sk_free(struct sock *sk)
 	if (sk->sk_destruct)
 		sk->sk_destruct(sk);
 
+	//FPRINTK("Release dst 0x%p on socket 0x%p[:%u]\n", sk->sk_rcv_dst, sk, inet_sk(sk)->num);
+//
+	//if (sock_flag(sk, SOCK_DIRECT_TCP) && sk->sk_rcv_dst) {
+	//	dst_release(sk->sk_rcv_dst);
+	//	sk->sk_rcv_dst = NULL;
+	//}
+
 	filter = rcu_dereference(sk->sk_filter);
 	if (filter) {
 		sk_filter_uncharge(sk, filter);
@@ -1129,6 +1138,7 @@ void sk_free(struct sock *sk)
 	 */
 	if (atomic_dec_and_test(&sk->sk_wmem_alloc))
 		__sk_free(sk);
+	FPRINTK("Release socket 0x%p[%u]\n", sk, atomic_read(&sk->sk_wmem_alloc));
 }
 EXPORT_SYMBOL(sk_free);
 
diff --git a/kernel/net/ipv4/af_inet.c b/kernel/net/ipv4/af_inet.c
index 295205c..f445b0c 100644
--- a/kernel/net/ipv4/af_inet.c
+++ b/kernel/net/ipv4/af_inet.c
@@ -154,6 +154,11 @@ void inet_sock_destruct(struct sock *sk)
 
 	kfree(inet->opt);
 	dst_release(sk->sk_dst_cache);
+	if (sk->sk_rcv_dst) {
+		FPRINTK("Release dst 0x%p[%u] on socket 0x%p\n", sk->sk_rcv_dst, atomic_read(&sk->sk_rcv_dst->__refcnt), sk);
+		dst_release(sk->sk_rcv_dst);
+		sk->sk_rcv_dst = NULL;
+	}
 	sk_refcnt_debug_dec(sk);
 }
 EXPORT_SYMBOL(inet_sock_destruct);
@@ -372,6 +377,7 @@ lookup_protocol:
 	sk->sk_destruct	   = inet_sock_destruct;
 	sk->sk_protocol	   = protocol;
 	sk->sk_backlog_rcv = sk->sk_prot->backlog_rcv;
+	//sk->sk_rcv_dst     = NULL;
 
 	inet->uc_ttl	= -1;
 	inet->mc_loop	= 1;
diff --git a/kernel/net/ipv4/ip_input.c b/kernel/net/ipv4/ip_input.c
index 6c98b43..393dbee 100644
--- a/kernel/net/ipv4/ip_input.c
+++ b/kernel/net/ipv4/ip_input.c
@@ -144,6 +144,8 @@
 #include <linux/mroute.h>
 #include <linux/netlink.h>
 
+//#define FPRINTK(msg, args...) printk(KERN_DEBUG "Fastsocket [CPU%d][PID-%d] %s:%d\t" msg, smp_processor_id(), current->pid, __FUNCTION__, __LINE__, ## args);
+
 /*
  *	Process Router Attention IP option
  */
@@ -332,6 +334,8 @@ static int ip_rcv_finish(struct sk_buff *skb)
 	if (skb_dst(skb) == NULL) {
 		int err = ip_route_input(skb, iph->daddr, iph->saddr, iph->tos,
 					 skb->dev);
+		FPRINTK("Skb 0x%p needs to go through route lookup\n", skb);
+
 		if (unlikely(err)) {
 			if (err == -EHOSTUNREACH)
 				IP_INC_STATS_BH(dev_net(skb->dev),
@@ -341,6 +345,8 @@ static int ip_rcv_finish(struct sk_buff *skb)
 						IPSTATS_MIB_INNOROUTES);
 			goto drop;
 		}
+	} else {
+		FPRINTK("Skb 0x%p has set dst cache 0x%p[%u]\n", skb, skb_dst(skb), atomic_read(&skb_dst(skb)->__refcnt));
 	}
 
 #ifdef CONFIG_NET_CLS_ROUTE
diff --git a/kernel/net/ipv4/tcp.c b/kernel/net/ipv4/tcp.c
index 414f590..69133c5 100644
--- a/kernel/net/ipv4/tcp.c
+++ b/kernel/net/ipv4/tcp.c
@@ -1853,6 +1853,9 @@ void tcp_close(struct sock *sk, long timeout)
 	lock_sock(sk);
 	sk->sk_shutdown = SHUTDOWN_MASK;
 
+	FPRINTK("Close socket 0x%p[:%u] with dst 0x%p\n", sk, inet_sk(sk)->num, sk->sk_rcv_dst);
+
+
 	if (sk->sk_state == TCP_LISTEN) {
 		tcp_set_state(sk, TCP_CLOSE);
 
diff --git a/kernel/net/ipv4/tcp_ipv4.c b/kernel/net/ipv4/tcp_ipv4.c
index 7f6ee22..5902971 100644
--- a/kernel/net/ipv4/tcp_ipv4.c
+++ b/kernel/net/ipv4/tcp_ipv4.c
@@ -86,6 +86,8 @@ int sysctl_tcp_tw_reuse __read_mostly;
 int sysctl_tcp_low_latency __read_mostly;
 
 
+//#define DPRINTK(msg, args...) printk(KERN_DEBUG "Fastsocket [CPU%d][PID-%d] %s:%d\t" msg, smp_processor_id(), current->pid, __FUNCTION__, __LINE__, ## args);
+
 #ifdef CONFIG_TCP_MD5SIG
 static struct tcp_md5sig_key *tcp_v4_md5_do_lookup(struct sock *sk,
 						   __be32 addr);
@@ -1614,6 +1616,25 @@ int tcp_v4_rcv(struct sk_buff *skb)
 	sk = __inet_lookup_skb(&tcp_hashinfo, skb, th->source, th->dest);
 	if (!sk)
 		goto no_tcp_socket;
+	
+	if (sock_flag(sk, SOCK_DIRECT_TCP)) {
+		FPRINTK("Skb 0x%p hit DIRECT_TCP socket 0x%p\n", skb, sk);
+		//if (!sk->sk_rcv_dst) {
+		if (sk->sk_state != TCP_LISTEN) {
+			if (!sk->sk_rcv_dst) {
+				//barrier();
+				sk->sk_rcv_dst = skb_dst(skb);
+				dst_hold(sk->sk_rcv_dst);
+				FPRINTK("Record dst 0x%p[%u] on the direct TCP socket 0x%p\n", skb_dst(skb), atomic_read(&skb_dst(skb)->__refcnt), sk);
+			} else {
+				FPRINTK("Dst 0x%p[%u] is already recorded on direct TCP socket 0x%p\n", sk->sk_rcv_dst, atomic_read(&sk->sk_rcv_dst->__refcnt), sk);
+			}
+		} else {
+			FPRINTK("Skb 0x%p skip listen socket 0x%p\n", skb, sk);
+		}
+	} else {
+		FPRINTK("Skb 0x%p hit common socket 0x%p\n", skb, sk);
+	}
 
 process:
 	if (sk->sk_state == TCP_TIME_WAIT)
diff --git a/module/fastsocket.c b/module/fastsocket.c
index 5555304..dbcdced 100644
--- a/module/fastsocket.c
+++ b/module/fastsocket.c
@@ -31,23 +31,26 @@
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Xiaofeng Lin <sina.com.cn>");
-MODULE_VERSION("1.0.0");
+MODULE_VERSION("1.0.0.D-TCP.2");
 MODULE_DESCRIPTION("Fastsocket which provides scalable and thus high kernel performance for socket application");
 
 static int enable_fastsocket_debug = 3;
 static int enable_listen_spawn = 2;
 extern int enable_receive_flow_deliver;
 static int enable_fast_epoll = 1;
+extern int enable_direct_tcp;
 
 module_param(enable_fastsocket_debug,int, 0);
 module_param(enable_listen_spawn, int, 0);
 module_param(enable_receive_flow_deliver, int, 0);
 module_param(enable_fast_epoll, int, 0);
+module_param(enable_direct_tcp, int, 0);
 
 MODULE_PARM_DESC(enable_fastsocket_debug, " Debug level [Default: 3]" );
 MODULE_PARM_DESC(enable_listen_spawn, " Control Listen-Spawn: 0 = Disbale, 1 = Process affinity required, 2 = Autoset process affinity[Default]");
 MODULE_PARM_DESC(enable_receive_flow_deliver, " Control Receive-Flow-Deliver: 0 = Disbale[Default], 1 = Enabled");
 MODULE_PARM_DESC(enable_fast_epoll, " Control Fast-Epoll: 0 = Disbale, 1 = Enabled[Default]");
+MODULE_PARM_DESC(enable_direct_tcp, " Control Direct-TCP: 0 = Disbale[Default], 1 = Enabled");
 
 int inline fsocket_get_dbg_level(void)
 {
@@ -73,7 +76,7 @@ static inline int fsocket_filp_close(struct file *file);
 static inline void fsock_release_sock(struct socket *sock)
 {
 	if (sock->ops) {
-		DPRINTK(DEBUG, "Release inode socket 0x%p\n", SOCK_INODE(sock));
+		//DPRINTK(DEBUG, "Release inode socket 0x%p\n", SOCK_INODE(sock));
 		sock->ops->release(sock);
 		sock->ops = NULL;
 	}
@@ -89,7 +92,7 @@ static inline void fsock_free_sock(struct socket *sock)
 
 static void fastsock_destroy_inode(struct inode *inode)
 {
-	DPRINTK(DEBUG, "Free inode 0x%p\n", inode);
+	//DPRINTK(DEBUG, "Free inode 0x%p\n", inode);
 
 	fsock_release_sock(INODE_SOCKET(inode));
 	fsock_free_sock(INODE_SOCKET(inode));
@@ -112,7 +115,7 @@ static struct inode *fastsock_alloc_inode(struct super_block *sb)
 	ei->socket.sk = NULL;
 	ei->socket.file = NULL;
 
-	DPRINTK(DEBUG, "Allocate inode 0x%p\n", &ei->vfs_inode);
+	//DPRINTK(DEBUG, "Allocate inode 0x%p\n", &ei->vfs_inode);
 
 	return &ei->vfs_inode;
 }
@@ -175,7 +178,7 @@ static inline ssize_t fast_sock_read(struct kiocb *iocb, const struct iovec *iov
 {
 	ssize_t ret;
 	ret = sock_aio_read(iocb, iov, nr_segs, pos);
-	DPRINTK(DEBUG, "Read %ld\n", ret);
+	//DPRINTK(DEBUG, "Read %ld\n", ret);
 	return ret;
 }
 
@@ -184,33 +187,33 @@ static inline ssize_t fast_sock_write(struct kiocb *iocb, const struct iovec *io
 {
 	ssize_t ret;
 	ret = sock_aio_write(iocb, iov, nr_segs, pos);
-	DPRINTK(DEBUG, "Write %ld\n", ret);
+	//DPRINTK(DEBUG, "Write %ld\n", ret);
 	return ret;
 }
 
 static inline long fast_sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 {
-	DPRINTK(INFO, "Do!\n");
+	//DPRINTK(INFO, "Do!\n");
 	return -EINVAL;
 }
 
 #ifdef CONFIG_COMPAT
 static inline long fast_compate_sock_ioctl(struct file *file, unsigned cmd, unsigned long arg)
 {
-	DPRINTK(INFO, "Do!\n");
+	//DPRINTK(INFO, "Do!\n");
 	return -EINVAL;
 }
 #endif
 
 static inline int fast_sock_mmap(struct file *file, struct vm_area_struct *vma)
 {
-	DPRINTK(INFO, "Do!\n");
+	//DPRINTK(INFO, "Do!\n");
 	return -EINVAL;
 }
 
 static inline int fast_sock_fasync(int fd, struct file *filp, int on)
 {
-	DPRINTK(INFO, "Do!\n");
+	//DPRINTK(INFO, "Do!\n");
 	return -EINVAL;
 }
 
@@ -222,7 +225,7 @@ static inline ssize_t fast_sock_sendpage(struct file *file, struct page *page,
 {
 	ssize_t ret;
 	ret = sock_sendpage(file, page, offset, size, ppos, more);
-	DPRINTK(DEBUG, "Send page %ld\n", ret);
+	//DPRINTK(DEBUG, "Send page %ld\n", ret);
 	return ret;
 }
 
@@ -236,7 +239,7 @@ static inline ssize_t fast_sock_splice_write(struct pipe_inode_info *pipe,
 {
 	ssize_t ret;
 	ret = generic_splice_sendpage(pipe, out, ppos, len, flags);
-	DPRINTK(DEBUG, "Splice wirte %ld\n", ret);
+	//DPRINTK(DEBUG, "Splice wirte %ld\n", ret);
 	return ret;
 }
 
@@ -245,7 +248,7 @@ static inline ssize_t fast_sock_splice_read(struct file *file, loff_t *ppos,
 {
 	ssize_t ret;
 	ret = sock_splice_read(file, ppos, pipe, len, flags);
-	DPRINTK(DEBUG, "Splice read %ld\n", ret);
+	//DPRINTK(DEBUG, "Splice read %ld\n", ret);
 	return ret;
 }
 
@@ -318,11 +321,11 @@ static int __fsocket_filp_close(struct file *file)
 
 		put_empty_filp(file);
 
-		DPRINTK(DEBUG, "Free file 0x%p[%ld]\n", file, atomic_long_read(&file->f_count));
+		//DPRINTK(DEBUG, "Free file 0x%p[%ld]\n", file, atomic_long_read(&file->f_count));
 
 		if (dentry) {
-			DPRINTK(DEBUG, "Release dentry 0x%p[%d]\n", dentry, atomic_read(&dentry->d_count));
-			DPRINTK(DEBUG, "Release inode 0x%p[%d]\n", dentry->d_inode, atomic_read(&dentry->d_inode->i_count));
+			//DPRINTK(DEBUG, "Release dentry 0x%p[%d]\n", dentry, atomic_read(&dentry->d_count));
+			//DPRINTK(DEBUG, "Release inode 0x%p[%d]\n", dentry->d_inode, atomic_read(&dentry->d_inode->i_count));
 		} else {
 			EPRINTK_LIMIT(ERR, "No dentry for file 0x%p\n", file);
 			return 1;
@@ -332,7 +335,7 @@ static int __fsocket_filp_close(struct file *file)
 		return 0;
 
 	} else {
-		DPRINTK(DEBUG, "Next time to release file 0x%p[%ld]\n", file, atomic_long_read(&file->f_count));
+		//DPRINTK(DEBUG, "Next time to release file 0x%p[%ld]\n", file, atomic_long_read(&file->f_count));
 		return 1;
 	}
 }
@@ -345,20 +348,20 @@ static inline int fsocket_filp_close(struct file *file)
 	sfile = file->sub_file;
 	ofile = file->old_file;
 
-	DPRINTK(DEBUG, "Close file 0x%p\n", file);
+	//DPRINTK(DEBUG, "Close file 0x%p\n", file);
 
 	retval = __fsocket_filp_close(file);
 
 	//FIXME: To close sub file and old file after close file successfully? Or the other way around.
 
 	if (sfile && !retval) {
-		DPRINTK(DEBUG, "Close sub file 0x%p\n", sfile);
+		//DPRINTK(DEBUG, "Close sub file 0x%p\n", sfile);
 		__fsocket_filp_close(sfile);
 	}
 
 	//Close old file when we don't need the socket fd, so it's safe to install the ofile back when spawn failed
 	if (ofile && !retval) {
-		DPRINTK(DEBUG, "Close old file 0x%p\n", ofile);
+		//DPRINTK(DEBUG, "Close old file 0x%p\n", ofile);
 		__fsocket_filp_close(ofile);
 	}
 
@@ -444,7 +447,7 @@ static struct socket *fsocket_alloc_socket(void)
 
 		percpu_add(fastsockets_in_use, 1);
 
-		DPRINTK(DEBUG, "Allocat inode 0x%p\n", inode);
+		//DPRINTK(DEBUG, "Allocat inode 0x%p\n", inode);
 	}
 	return sock;
 }
@@ -466,7 +469,7 @@ static struct dentry *fsock_d_alloc(struct socket *sock, struct dentry *parent,
 	if (!dentry)
 		return NULL;
 
-	DPRINTK(DEBUG, "\tAllocat dentry 0x%p\n", dentry);
+	//DPRINTK(DEBUG, "\tAllocat dentry 0x%p\n", dentry);
 	
 	if (name->len > DNAME_INLINE_LEN-1) {
 		dname = kmalloc(name->len + 1, GFP_KERNEL);
@@ -543,7 +546,7 @@ static int fsock_alloc_file(struct socket *sock, struct file **f, int flags)
 		return -ENFILE;
 	}
 	
-	DPRINTK(DEBUG, "Allocate file 0x%p\n", file);
+	//DPRINTK(DEBUG, "Allocate file 0x%p\n", file);
 
 	file->f_path = path;
 	file->f_mapping = path.dentry->d_inode->i_mapping;
@@ -577,6 +580,15 @@ static int fsock_map_fd(struct socket *sock, int flags)
 	return fd;
 }
 
+static void fsocket_init_socket(struct socket *sock)
+{
+	if (enable_direct_tcp) {
+		sock_set_flag(sock->sk, SOCK_DIRECT_TCP);
+		FPRINTK("Socket 0x%p is set with DIRECT_TCP\n", sock->sk);
+	}
+	//sock->sk->sk_rcv_dst = NULL;
+}
+
 static void fsocket_copy_socket(struct socket *oldsock, struct socket *newsock)
 {
 	//TODO: Check if all these copy works.
@@ -599,6 +611,8 @@ static void fsocket_copy_socket(struct socket *oldsock, struct socket *newsock)
 		inet_csk(oldsock->sk)->icsk_accept_queue.rskq_defer_accept;
 	/* TCP_QUICKACK */
 	inet_csk(newsock->sk)->icsk_ack.pingpong = inet_csk(oldsock->sk)->icsk_ack.pingpong;
+
+	//TODO: Other attibutes that need to be copied
 }
 
 static int fsocket_spawn_clone(int fd, struct socket *oldsock, struct socket **newsock)
@@ -616,7 +630,7 @@ static int fsocket_spawn_clone(int fd, struct socket *oldsock, struct socket **n
 	 * Allocate file for local spawned listen socket.
 	*/
 
-	DPRINTK(DEBUG, "Spawn inode 0x%p\n", SOCK_INODE(oldsock));
+	//DPRINTK(DEBUG, "Spawn inode 0x%p\n", SOCK_INODE(oldsock));
 
 	sfile = get_empty_filp();
 	if (sfile == NULL) {
@@ -625,7 +639,7 @@ static int fsocket_spawn_clone(int fd, struct socket *oldsock, struct socket **n
 		goto out;
 	}
 	
-	DPRINTK(DEBUG, "Allocate sub listen socket file 0x%p\n", sfile);
+	//DPRINTK(DEBUG, "Allocate sub listen socket file 0x%p\n", sfile);
 
 	sock = fsocket_alloc_socket();
 	if (sock == NULL) {
@@ -645,6 +659,8 @@ static int fsocket_spawn_clone(int fd, struct socket *oldsock, struct socket **n
 		goto out;
 	}
 
+	//fsocket_init_socket(sock);
+
 	sock->sk->sk_cpumask = 0;
 
 	fsocket_copy_socket(oldsock, sock);
@@ -692,7 +708,7 @@ static int fsocket_spawn_clone(int fd, struct socket *oldsock, struct socket **n
 		goto out;
 	}
 
-	DPRINTK(DEBUG, "Allocate new listen socket file 0x%p\n", nfile);
+	//DPRINTK(DEBUG, "Allocate new listen socket file 0x%p\n", nfile);
 
 	path.dentry = fsock_d_alloc(oldsock, NULL, &name);
 	if (unlikely(!path.dentry)) {
@@ -724,7 +740,7 @@ static int fsocket_spawn_clone(int fd, struct socket *oldsock, struct socket **n
 	//Save ofile in case that spawn failed and the listen fd can be restored back right before the spawn
 	nfile->old_file = ofile;
 	
-	DPRINTK(DEBUG, "Clone new socket %d\n", err);
+	//DPRINTK(DEBUG, "Clone new socket %d\n", err);
 
 	*newsock = sock;
 
@@ -761,6 +777,8 @@ static int fsocket_socket(int flags)
 		goto free_sock;
 	}
 
+	fsocket_init_socket(sock);
+
 	err = fsock_map_fd(sock, flags);
 	if (err < 0) {
 		EPRINTK_LIMIT(ERR, "Map Socket FD failed\n");
@@ -794,15 +812,15 @@ static int fsocket_epoll_ctl(struct eventpoll *ep, struct file *tfile, int fd,
 	mutex_lock(&ep->mtx);
 	
 	if (tfile->f_mode & FMODE_BIND_EPI) {
-		DPRINTK(DEBUG, "File 0x%p binds epi\n", tfile);
+		//DPRINTK(DEBUG, "File 0x%p binds epi\n", tfile);
 		epi = tfile->f_epi;
 	}
 	else {
-		DPRINTK(DEBUG, "File 0x%p binds NO epi\n", tfile);
+		//DPRINTK(DEBUG, "File 0x%p binds NO epi\n", tfile);
 		epi = ep_find(ep, tfile, fd);
 	}
 
-	DPRINTK(DEBUG, "OP %d EPI 0x%p\n", op, epi);
+	//DPRINTK(DEBUG, "OP %d EPI 0x%p\n", op, epi);
 	
 	sfile = tfile->sub_file;
 
@@ -810,10 +828,10 @@ static int fsocket_epoll_ctl(struct eventpoll *ep, struct file *tfile, int fd,
 	case EPOLL_CTL_ADD:
 		if (!epi) {
 			epds.events |= POLLERR | POLLHUP;
-			DPRINTK(DEBUG, "Insert common socket %d\n", fd);
+			//DPRINTK(DEBUG, "Insert common socket %d\n", fd);
 			error = ep_insert(ep, &epds, tfile, fd);
 			if (sfile && !error) {
-				DPRINTK(DEBUG, "Insert spawned listen socket %d\n", fd);
+				//DPRINTK(DEBUG, "Insert spawned listen socket %d\n", fd);
 				error = ep_insert(ep, &epds, sfile, fd);
 			}
 		} else
@@ -821,13 +839,13 @@ static int fsocket_epoll_ctl(struct eventpoll *ep, struct file *tfile, int fd,
 		break;
 	case EPOLL_CTL_DEL:
 		if (epi) {
-			DPRINTK(DEBUG, "Remove common socket %d\n", fd);
+			//DPRINTK(DEBUG, "Remove common socket %d\n", fd);
 			error = ep_remove(ep, epi);
 			if (sfile && !error) {
 				struct epitem *sepi;
 				error = -ENOENT;
 
-				DPRINTK(DEBUG, "Remove spawned listen socket %d\n", fd);
+				//DPRINTK(DEBUG, "Remove spawned listen socket %d\n", fd);
 				sepi = sfile->f_epi;
 				if (sepi)
 					error = ep_remove(ep, sepi);
@@ -840,10 +858,10 @@ static int fsocket_epoll_ctl(struct eventpoll *ep, struct file *tfile, int fd,
 	case EPOLL_CTL_MOD:
 		if (epi) {
 			epds.events |= POLLERR | POLLHUP;
-			DPRINTK(DEBUG, "Modify common socket %d\n", fd);
+			//DPRINTK(DEBUG, "Modify common socket %d\n", fd);
 			error = ep_modify(ep, epi, &epds);
 			if (sfile && !error) {
-				DPRINTK(DEBUG, "Modify spawned listen socket %d\n", fd);
+				//DPRINTK(DEBUG, "Modify spawned listen socket %d\n", fd);
 				error = ep_modify(ep, epi, &epds);
 			}
 		} else
@@ -898,12 +916,12 @@ static int fsocket_process_affinity_check(void)
 	}
 
 	if (ccpu >= nr_cpumask_bits) {
-		DPRINTK(DEBUG, "Current process affinity is messed up\n");
+		//DPRINTK(DEBUG, "Current process affinity is messed up\n");
 		return -EINVAL;
 	}
 
 	if (ncpu >= nr_cpumask_bits) {
-		DPRINTK(INFO, "Current process already binds to CPU %d\n", ccpu);
+		//DPRINTK(INFO, "Current process already binds to CPU %d\n", ccpu);
 		return ccpu;
 	}
 
@@ -914,7 +932,7 @@ static int fsocket_process_affinity_check(void)
 
 	for (cpu = spawn_cpu; cpu < num_active_cpus(); cpu++) {
 		if (!cpu_isset(cpu, spawn_cpuset)) {
-			DPRINTK(INFO, "CPU %d is available for process affinity\n", cpu);
+			//DPRINTK(INFO, "CPU %d is available for process affinity\n", cpu);
 			tcpu = cpu;
 			break;
 		}
@@ -928,7 +946,7 @@ static int fsocket_process_affinity_check(void)
 		return -EINVAL;
 	}
 
-	DPRINTK(INFO, "Target process affinity: %d\n", tcpu);
+	//DPRINTK(INFO, "Target process affinity: %d\n", tcpu);
 
 	return tcpu;
 }
@@ -937,7 +955,7 @@ static void fsocket_sk_affinity_set(struct socket *sock, int cpu)
 {
 	sock->sk->sk_cpumask = (unsigned long)1 << cpu;
 
-	DPRINTK(DEBUG, "Bind this listen socket to CPU %d with bitmap 0x%02lx\n", cpu, sock->sk->sk_cpumask);
+	//DPRINTK(DEBUG, "Bind this listen socket to CPU %d with bitmap 0x%02lx\n", cpu, sock->sk->sk_cpumask);
 }
 
 static void fsocket_sk_affinity_release(struct socket *sock)
@@ -957,9 +975,9 @@ static void fsocket_filp_close_spawn(int fd)
 
 	fd_reinstall(fd, ofile);
 
-	DPRINTK(DEBUG, "Close sub file 0x%p\n", sfile);
+	//DPRINTK(DEBUG, "Close sub file 0x%p\n", sfile);
 	__fsocket_filp_close(sfile);
-	DPRINTK(DEBUG, "Close new file 0x%p\n", nfile);
+	//DPRINTK(DEBUG, "Close new file 0x%p\n", nfile);
 	__fsocket_filp_close(nfile);
 
 	fput_light(nfile, fput_needed);
@@ -998,7 +1016,7 @@ static int fsocket_spawn(struct file *filp, int fd, int tcpu)
 	struct sockaddr_in addr;
 	kernel_cap_t p;
 
-	DPRINTK(INFO, "Listen spawn listen fd %d on CPU %d\n", fd, tcpu);
+	//DPRINTK(INFO, "Listen spawn listen fd %d on CPU %d\n", fd, tcpu);
 
 	if (filp->sub_file) {
 		EPRINTK_LIMIT(ERR, "Spawn on a already spawned file 0x%p\n", filp);
@@ -1083,7 +1101,7 @@ static int fastsocket_spawn(struct fsocket_ioctl_arg *u_arg)
 		return -EFAULT;
 	}
 
-	DPRINTK(DEBUG, "Listen spawn listen fd %d\n", arg.fd);
+	//DPRINTK(DEBUG, "Listen spawn listen fd %d\n", arg.fd);
 	
 	fd = arg.fd;
 	tcpu = arg.op.spawn_op.cpu;
@@ -1097,7 +1115,7 @@ static int fastsocket_spawn(struct fsocket_ioctl_arg *u_arg)
 	if (tfile->f_mode & FMODE_FASTSOCKET)
 		ret = fsocket_spawn(tfile, fd, tcpu);
 	else {
-		DPRINTK(INFO, "Spawn non fastsocket\n");
+		//DPRINTK(INFO, "Spawn non fastsocket\n");
 		return -EINVAL;
 	}
 	
@@ -1192,7 +1210,7 @@ static int fsocket_spawn_accept(struct file *file , struct sockaddr __user *upee
 		goto out;
 	}
 
-	DPRINTK(DEBUG, "Accept file 0x%p\n", file);
+	//DPRINTK(DEBUG, "Accept file 0x%p\n", file);
 
 	if (!(newsock = fsocket_alloc_socket())) {
 		EPRINTK_LIMIT(ERR, "Allocate empty socket failed\n");
@@ -1212,10 +1230,10 @@ static int fsocket_spawn_accept(struct file *file , struct sockaddr __user *upee
 	}
 
 	if (!file->sub_file) {
-		DPRINTK(DEBUG, "File 0x%p has no sub file, Do common accept\n", file);
+		//DPRINTK(DEBUG, "File 0x%p has no sub file, Do common accept\n", file);
 		err = fsocket_common_accept(sock, newsock, O_NONBLOCK);
 	} else {
-		DPRINTK(DEBUG, "File 0x%p has sub file 0x%p, Do spawn accept\n", file, file->sub_file);
+		//DPRINTK(DEBUG, "File 0x%p has sub file 0x%p, Do spawn accept\n", file, file->sub_file);
 		icsk = inet_csk(sock->sk);
 		lsock = (struct socket *)file->sub_file->private_data;
 		if (!lsock) {
@@ -1225,14 +1243,14 @@ static int fsocket_spawn_accept(struct file *file , struct sockaddr __user *upee
 		}
 
 		if (unlikely(!reqsk_queue_empty(&icsk->icsk_accept_queue))) {
-			DPRINTK(DEBUG, "Accept global listen socket 0x%p\n", sock);
+			//DPRINTK(DEBUG, "Accept global listen socket 0x%p\n", sock);
 			err = fsocket_global_accept(sock, newsock, O_NONBLOCK);
 			if (err < 0) {
-				DPRINTK(DEBUG, "Check local listen socket 0x%p again\n", lsock);
+				//DPRINTK(DEBUG, "Check local listen socket 0x%p again\n", lsock);
 				err = fsocket_local_accept(lsock, newsock, O_NONBLOCK);
 			}
 		} else {
-			DPRINTK(DEBUG, "Accept local listen socket 0x%p\n", lsock);
+			//DPRINTK(DEBUG, "Accept local listen socket 0x%p\n", lsock);
 			err = fsocket_local_accept(lsock, newsock, O_NONBLOCK);
 		}
 	}
@@ -1243,6 +1261,9 @@ static int fsocket_spawn_accept(struct file *file , struct sockaddr __user *upee
 		goto out_fd;
 	}
 
+	/* Accepted socket flags are copied from listen socket */
+	//fsocket_init_socket(newsock);
+
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address, &len, 2) < 0) {
 			EPRINTK_LIMIT(ERR, "Getname failed for accepted socket\n");
@@ -1258,7 +1279,7 @@ static int fsocket_spawn_accept(struct file *file , struct sockaddr __user *upee
 	fd_install(newfd, newfile);
 	err = newfd;
 
-	DPRINTK(DEBUG, "Accept file 0x%p new fd %d\n", file, newfd);
+	//DPRINTK(DEBUG, "Accept file 0x%p new fd %d\n", file, newfd);
 
 	goto out;
 
@@ -1288,11 +1309,11 @@ int fastsocket_accept(struct fsocket_ioctl_arg *u_arg)
 	}
 
 	if (tfile->f_mode & FMODE_FASTSOCKET) {
-		DPRINTK(DEBUG, "Accept fastsocket %d\n", arg.fd);
+		//DPRINTK(DEBUG, "Accept fastsocket %d\n", arg.fd);
 		ret = fsocket_spawn_accept(tfile, arg.op.accept_op.sockaddr, 
 				arg.op.accept_op.sockaddr_len, arg.op.accept_op.flags);
 	} else {
-		DPRINTK(INFO, "Accept non-fastsocket %d\n", arg.fd);
+		//DPRINTK(INFO, "Accept non-fastsocket %d\n", arg.fd);
 		ret = sys_accept(arg.fd, arg.op.accept_op.sockaddr, arg.op.accept_op.sockaddr_len);
 	}
 	fput_light(tfile, fput_need);
@@ -1321,7 +1342,7 @@ static int fastsocket_listen(struct fsocket_ioctl_arg *u_arg)
 	}
 	
 	if (tfile->f_mode & FMODE_FASTSOCKET) {
-		DPRINTK(DEBUG,"Listen fastsocket %d\n", fd);
+		//DPRINTK(DEBUG,"Listen fastsocket %d\n", fd);
 		if (enable_fast_epoll) {
 			/* For listen fastsocket, set single-wakeup and reset bind-epi */
 			tfile->f_mode |= FMODE_SINGLE_WAKEUP;
@@ -1329,7 +1350,7 @@ static int fastsocket_listen(struct fsocket_ioctl_arg *u_arg)
 		}
 
 	} else {
-		DPRINTK(INFO, "Listen non-fastsocket %d\n", fd);
+		//DPRINTK(INFO, "Listen non-fastsocket %d\n", fd);
 	}
 	
 	ret = sys_listen(fd, backlog);
@@ -1344,7 +1365,7 @@ static int fastsocket_socket(struct fsocket_ioctl_arg *u_arg)
 	struct fsocket_ioctl_arg arg; 
 	int family, type, protocol, fd;
 
-	DPRINTK(DEBUG,"Try to create fastsocket\n");
+	//DPRINTK(DEBUG,"Try to create fastsocket\n");
 
 	if (copy_from_user(&arg, u_arg, sizeof(arg))) {
 		EPRINTK_LIMIT(ERR, "copy ioctl parameter from user space to kernel failed\n");
@@ -1358,11 +1379,11 @@ static int fastsocket_socket(struct fsocket_ioctl_arg *u_arg)
 	if (( family == AF_INET ) && 
 		((type & SOCK_TYPE_MASK) == SOCK_STREAM )) {
 		fd = fsocket_socket(type & ~SOCK_TYPE_MASK);
-		DPRINTK(DEBUG,"Create fastsocket %d\n", fd);
+		//DPRINTK(DEBUG,"Create fastsocket %d\n", fd);
 		return fd;
 	} else { 
 		fd = sys_socket(family, type, protocol);
-		DPRINTK(INFO, "Create non fastsocket %d\n", fd);
+		//DPRINTK(INFO, "Create non fastsocket %d\n", fd);
 		return fd;
 	}
 }
@@ -1374,7 +1395,7 @@ static int fastsocket_close(struct fsocket_ioctl_arg * u_arg)
 	struct fsocket_ioctl_arg arg;
 	int fput_need;
 
-	DPRINTK(DEBUG,"Close fastsocket %d\n", arg.fd);
+	//DPRINTK(DEBUG,"Close fastsocket %d\n", arg.fd);
 
 	if (copy_from_user(&arg, u_arg, sizeof(arg))) {
 		EPRINTK_LIMIT(ERR, "copy ioctl parameter from user space to kernel failed\n");
@@ -1392,7 +1413,7 @@ static int fastsocket_close(struct fsocket_ioctl_arg * u_arg)
 		error = fsocket_close(arg.fd);
 	} else {
 		fput_light(tfile, fput_need);
-		DPRINTK(INFO, "Close non fastsocket %d\n", arg.fd);
+		//DPRINTK(INFO, "Close non fastsocket %d\n", arg.fd);
 		error = sys_close(arg.fd);
 	}
 	
@@ -1411,13 +1432,13 @@ static int fastsocket_epoll_ctl(struct fsocket_ioctl_arg *u_arg)
 		return -EFAULT;
 	}
 
-	DPRINTK(DEBUG, "Epoll_ctl socket %d[%d]\n", arg.fd, arg.op.epoll_op.ep_ctl_cmd);
+	//DPRINTK(DEBUG, "Epoll_ctl socket %d[%d]\n", arg.fd, arg.op.epoll_op.ep_ctl_cmd);
 
 	/* Only use module epoll_ctl when listen spawn is enabled,
 	 * fastepoll is taken care of by kernel source.
 	 */
 	if (!enable_listen_spawn) {
-		DPRINTK(DEBUG, "Fastsocket epoll is disabled\n");
+		//DPRINTK(DEBUG, "Fastsocket epoll is disabled\n");
 		ret = sys_epoll_ctl(arg.op.epoll_op.epoll_fd, arg.op.epoll_op.ep_ctl_cmd, 
 				arg.fd, arg.op.epoll_op.ev);
 		return ret;
@@ -1442,7 +1463,7 @@ static int fastsocket_epoll_ctl(struct fsocket_ioctl_arg *u_arg)
 		ret = fsocket_epoll_ctl(ep, tfile, arg.fd, arg.op.epoll_op.ep_ctl_cmd, 
 				arg.op.epoll_op.ev);
 	} else {
-		DPRINTK(INFO, "Target socket %d is Not Fastsocket\n", arg.fd);
+		//DPRINTK(INFO, "Target socket %d is Not Fastsocket\n", arg.fd);
 		ret = sys_epoll_ctl(arg.op.epoll_op.epoll_fd, arg.op.epoll_op.ep_ctl_cmd, 
 				arg.fd, arg.op.epoll_op.ev);
 	}
@@ -1482,7 +1503,7 @@ static int fsocket_open(struct inode *inode, struct file *filp)
 		return -EINVAL;
 	}
 
-	DPRINTK(INFO, "Hold module reference\n");
+	//DPRINTK(INFO, "Hold module reference\n");
 
 	cpus_clear(spawn_cpuset);
 	spawn_cpu = 0;
@@ -1494,7 +1515,7 @@ static int fsocket_release(struct inode *inode, struct file *filp)
 {
 	module_put(THIS_MODULE);
 	
-	DPRINTK(INFO, "Release module reference\n");
+	//DPRINTK(INFO, "Release module reference\n");
 
 	return 0;
 }
@@ -1523,9 +1544,9 @@ static int __init  fastsocket_init(void)
 {
 	int ret = 0;
 
-	DPRINTK(INFO, "CPU number: online %d possible %d present %d active %d\n",
-			num_online_cpus(), num_possible_cpus(),
-			num_present_cpus(), num_active_cpus());
+	//DPRINTK(INFO, "CPU number: online %d possible %d present %d active %d\n",
+	//		num_online_cpus(), num_possible_cpus(),
+	//		num_present_cpus(), num_active_cpus());
 
 	ret = misc_register(&fastsocket_dev);
 	if (ret < 0) {
@@ -1545,7 +1566,7 @@ static int __init  fastsocket_init(void)
 	}
 
 	sock_mnt = kern_mount(&fastsock_fs_type);
-	DPRINTK(DEBUG, "Fastsocket super block 0x%p ops 0x%p\n", sock_mnt->mnt_sb, sock_mnt->mnt_sb->s_op);
+	//DPRINTK(DEBUG, "Fastsocket super block 0x%p ops 0x%p\n", sock_mnt->mnt_sb, sock_mnt->mnt_sb->s_op);
 
 	if (IS_ERR(sock_mnt)) {
 		EPRINTK_LIMIT(ERR, "Mount fastsocket filesystem failed\n");
@@ -1563,6 +1584,8 @@ static int __init  fastsocket_init(void)
 		printk(KERN_INFO "Fastsocket: Enable Recieve Flow Deliver\n");
 	if (enable_fast_epoll)
 		printk(KERN_INFO "Fastsocket: Enable Fast Epoll\n");
+	if (enable_direct_tcp)
+		printk(KERN_INFO "Fastsocket: Enable Direct TCP\n");
 
 	return ret;
 }
@@ -1571,7 +1594,7 @@ static void __exit fastsocket_exit(void)
 {
 	misc_deregister(&fastsocket_dev);
 
-	DPRINTK(DEBUG, "Fastsocket super block 0x%p ops 0x%p\n", sock_mnt->mnt_sb, sock_mnt->mnt_sb->s_op);
+	//DPRINTK(DEBUG, "Fastsocket super block 0x%p ops 0x%p\n", sock_mnt->mnt_sb, sock_mnt->mnt_sb->s_op);
 	mntput(sock_mnt);
 
 	unregister_filesystem(&fastsock_fs_type);
@@ -1582,6 +1605,10 @@ static void __exit fastsocket_exit(void)
 		enable_receive_flow_deliver = 0;
 		printk(KERN_INFO "Fastsocket: Disable Recieve Flow Deliver\n");
 	}
+	if (enable_direct_tcp) {
+		enable_direct_tcp = 0;
+		printk(KERN_INFO "Fastsocket: Disable Direct TCP\n");
+	}
 
 
 	printk(KERN_INFO "Fastsocket: Remove Module\n");
diff --git a/module/fastsocket.h b/module/fastsocket.h
index a0a3ad5..917f52f 100644
--- a/module/fastsocket.h
+++ b/module/fastsocket.h
@@ -38,7 +38,7 @@ static inline int fastsocket_limit(void)
 	return __ratelimit(&fastsocket_ratelimit_state);
 }
 
-#define DPRINTK(level, msg, args...) {}
+//#define DPRINTK(level, msg, args...) {}
 
 #ifndef DPRINTK
 #define DPRINTK(level, msg, args...) ({\
