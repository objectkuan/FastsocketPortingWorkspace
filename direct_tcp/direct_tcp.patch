diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 85da301..918d0a4 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -24,6 +24,9 @@
 extern const char linux_banner[];
 extern const char linux_proc_banner[];
 
+//#define FPRINTK(msg, args...) printk(KERN_DEBUG "Fastsocket [CPU%d][PID-%d] %s:%d\t" msg, smp_processor_id(), current->pid, __FUNCTION__, __LINE__, ## args)
+#define FPRINTK(msg, args...)
+
 #define USHORT_MAX	((u16)(~0U))
 #define SHORT_MAX	((s16)(USHORT_MAX>>1))
 #define SHORT_MIN	(-SHORT_MAX - 1)
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 4879804..0024bf8 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -367,10 +367,12 @@ struct sk_buff {
 	struct sk_buff		*prev;
 
 	struct sock		*sk;
+	struct sock		*peek_sk;
 	ktime_t			tstamp;
 	struct net_device	*dev;
 
 	unsigned long		_skb_dst;
+	struct dst_entry	*sock_dst;
 #ifdef CONFIG_XFRM
 	struct	sec_path	*sp;
 #endif
diff --git a/include/net/dst.h b/include/net/dst.h
index 4815b48..4d72ea6 100644
--- a/include/net/dst.h
+++ b/include/net/dst.h
@@ -197,7 +197,7 @@ struct dst_entry * dst_clone(struct dst_entry * dst)
 extern void dst_release(struct dst_entry *dst);
 static inline void skb_dst_drop(struct sk_buff *skb)
 {
-	if (skb->_skb_dst)
+	if (!skb->sock_dst && skb->_skb_dst)
 		dst_release(skb_dst(skb));
 	skb->_skb_dst = 0UL;
 }
diff --git a/include/net/inet_hashtables.h b/include/net/inet_hashtables.h
index dddde5f..de8e6f5 100644
--- a/include/net/inet_hashtables.h
+++ b/include/net/inet_hashtables.h
@@ -426,7 +426,7 @@ static inline struct sock *__inet_lookup_skb(struct inet_hashinfo *hashinfo,
 	struct sock *sk;
 	const struct iphdr *iph = ip_hdr(skb);
 
-	if (unlikely(sk = skb_steal_sock(skb)))
+	if ((sk = skb_steal_sock(skb)))
 		return sk;
 	else
 		return __inet_lookup(dev_net(skb_dst(skb)->dev), hashinfo,
diff --git a/include/net/sock.h b/include/net/sock.h
index 5cefce3..87dad9b 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -252,6 +252,7 @@ struct sock {
 	} sk_backlog;
 	wait_queue_head_t	*sk_sleep;
 	struct dst_entry	*sk_dst_cache;
+	struct dst_entry	*sk_rcv_dst;
 #ifdef CONFIG_XFRM
 	struct xfrm_policy	*sk_policy[2];
 #endif
@@ -580,6 +581,7 @@ enum sock_flags {
 	SOCK_TIMESTAMPING_SYS_HARDWARE, /* %SOF_TIMESTAMPING_SYS_HARDWARE */
 	SOCK_RXQ_OVFL,
 	SOCK_ZEROCOPY, /* buffers from userspace */
+	SOCK_DIRECT_TCP, /* bypass ip layer when receive skb */
 	SOCK_RELAX = 31, /* kABI: bind conflict relax bit */
 };
 
@@ -1275,6 +1277,8 @@ static inline void sock_put(struct sock *sk)
 {
 	if (atomic_dec_and_test(&sk->sk_refcnt))
 		sk_free(sk);
+
+	FPRINTK("Release socket 0x%p[%u]\n", sk, atomic_read(&sk->sk_refcnt));
 }
 
 extern int sk_receive_skb(struct sock *sk, struct sk_buff *skb,
@@ -1776,6 +1780,11 @@ static inline void sk_change_net(struct sock *sk, struct net *net)
 
 static inline struct sock *skb_steal_sock(struct sk_buff *skb)
 {
+	if (skb->peek_sk) {
+		FPRINTK("Skb 0x%p has set socket 0x%p\n", skb, skb->peek_sk);
+		return skb->peek_sk;
+	}
+
 	if (unlikely(skb->sk)) {
 		struct sock *sk = skb->sk;
 
diff --git a/net/core/dev.c b/net/core/dev.c
index a1cadb6..6529c9c 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3450,7 +3450,7 @@ static int netif_deliver_cpu(unsigned short dport)
 
 #define RESERVED_SERVICE_PORT	1024
 
-static int netif_deliver_skb(struct sk_buff *skb)
+static int get_rfd_cpu(struct sk_buff *skb)
 {
 	if (skb->protocol != htons(ETH_P_IP))
 		return -1;
@@ -3511,13 +3511,59 @@ static int netif_deliver_skb(struct sk_buff *skb)
 int enable_receive_flow_deliver = 0;
 EXPORT_SYMBOL(enable_receive_flow_deliver);
 
+static void netif_direct_tcp(struct sk_buff *skb)
+{
+	if (skb->protocol != htons(ETH_P_IP))
+		return;
+
+	if (pskb_may_pull(skb, sizeof(struct iphdr))) {
+		struct iphdr *iph = (struct iphdr *)skb->data;
+		int iphl = iph->ihl;
+		u8 ip_proto = iph->protocol;
+
+		if (ip_proto != IPPROTO_TCP)
+			return;
+
+		if (pskb_may_pull(skb, (iphl * 4) + sizeof(struct tcphdr))) {
+			struct tcphdr *th = (struct tcphdr *)(skb->data + (iphl * 4));
+			struct sock *sk;
+
+			sk = __inet_lookup(&init_net, &tcp_hashinfo, iph->saddr, th->source,
+					iph->daddr, th->dest, skb->dev->ifindex);
+			if (sk) {
+				if (sock_flag(sk, SOCK_DIRECT_TCP)) {
+					FPRINTK("Skb 0x%p[:%u] hit DIRECT_TCP socket 0x%p[:%u]\n", skb, ntohs(th->dest), sk, inet_sk(sk)->num);
+					if(sk->sk_rcv_dst) {
+						skb_dst_set(skb, sk->sk_rcv_dst);
+						skb->sock_dst = sk->sk_rcv_dst;
+						FPRINTK("Direct TCP socket 0x%p has dst record 0x%p[%u]\n", sk, sk->sk_rcv_dst, atomic_read(&sk->sk_rcv_dst->__refcnt));
+					} else {
+						FPRINTK("Direct TCP socket 0x%p has not dst record\n", sk);
+					}
+					skb->peek_sk = sk;
+					FPRINTK("Store socket 0x%p in skb 0x%p\n", sk, skb);
+				} else {
+					sock_put(sk);
+					FPRINTK("Skb 0x%p[:%u] hit common socket 0x%p[:%u]\n", skb,ntohs(th->dest), sk, inet_sk(sk)->num);
+				}
+			}
+		}
+	}
+}
+
+int enable_direct_tcp = 0;
+EXPORT_SYMBOL(enable_direct_tcp);
+
 int netif_receive_skb(struct sk_buff *skb)
 {
 	struct rps_dev_flow voidflow, *rflow = &voidflow;
 	int cpu, ret;
 
+	if (enable_direct_tcp)
+		netif_direct_tcp(skb);
+
 	if (enable_receive_flow_deliver)
-		cpu = netif_deliver_skb(skb);
+		cpu = get_rfd_cpu(skb);
 	else
 	cpu = get_rps_cpu(skb->dev, skb, &rflow);
 
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 361f45a..a0dae79 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -597,6 +597,8 @@ static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 	new->network_header	= old->network_header;
 	new->mac_header		= old->mac_header;
 	skb_dst_set(new, dst_clone(skb_dst(old)));
+	new->sock_dst		= old->sock_dst;
+	new->peek_sk		= old->peek_sk;
 	new->rxhash		= old->rxhash;
 	new->encapsulation	= old->encapsulation;
 #ifdef CONFIG_XFRM
diff --git a/net/core/sock.c b/net/core/sock.c
index f17d5c6..f9ef480 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -1072,6 +1072,8 @@ static struct sock *sk_prot_alloc(struct proto *prot, gfp_t priority,
 		 */
 		sk->sk_prot_creator = prot;
 		sk_tx_queue_clear(sk);
+		sk->sk_rcv_dst = NULL;
+		FPRINTK("Initiate dst on socket 0x%p[:%u]\n", sk, inet_sk(sk)->num);
 	}
 
 	return sk;
@@ -1193,6 +1195,7 @@ void sk_free(struct sock *sk)
 	 */
 	if (atomic_dec_and_test(&sk->sk_wmem_alloc))
 		__sk_free(sk);
+	FPRINTK("Release socket 0x%p[%u]\n", sk, atomic_read(&sk->sk_wmem_alloc));
 }
 EXPORT_SYMBOL(sk_free);
 
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 8dca6c2..c2d66dc 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -155,6 +155,11 @@ void inet_sock_destruct(struct sock *sk)
 	kfree_ip_options(rcu_dereference(inet->opt));
 	dst_release(sk->sk_dst_cache);
 	sk_refcnt_debug_dec(sk);
+	if (sk->sk_rcv_dst) {
+		FPRINTK("Release dst 0x%p[%u] on socket 0x%p\n", sk->sk_rcv_dst, atomic_read(&sk->sk_rcv_dst->__refcnt), sk);
+		dst_release(sk->sk_rcv_dst);
+		sk->sk_rcv_dst = NULL;
+	}
 }
 EXPORT_SYMBOL(inet_sock_destruct);
 
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index 6c98b43..666689d 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -332,6 +332,8 @@ static int ip_rcv_finish(struct sk_buff *skb)
 	if (skb_dst(skb) == NULL) {
 		int err = ip_route_input(skb, iph->daddr, iph->saddr, iph->tos,
 					 skb->dev);
+		FPRINTK("Skb 0x%p needs to go through route lookup\n", skb);
+
 		if (unlikely(err)) {
 			if (err == -EHOSTUNREACH)
 				IP_INC_STATS_BH(dev_net(skb->dev),
@@ -341,6 +343,8 @@ static int ip_rcv_finish(struct sk_buff *skb)
 						IPSTATS_MIB_INNOROUTES);
 			goto drop;
 		}
+	} else {
+		FPRINTK("Skb 0x%p has set dst cache 0x%p[%u]\n", skb, skb_dst(skb), atomic_read(&skb_dst(skb)->__refcnt));
 	}
 
 #ifdef CONFIG_NET_CLS_ROUTE
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 3396457..a0a2991 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -1879,6 +1879,8 @@ void tcp_close(struct sock *sk, long timeout)
 	lock_sock(sk);
 	sk->sk_shutdown = SHUTDOWN_MASK;
 
+	FPRINTK("Close socket 0x%p[:%u] with dst 0x%p\n", sk, inet_sk(sk)->num, sk->sk_rcv_dst);
+
 	if (sk->sk_state == TCP_LISTEN) {
 		tcp_set_state(sk, TCP_CLOSE);
 
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 07906ed..bc1a9cf 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1621,6 +1621,23 @@ int tcp_v4_rcv(struct sk_buff *skb)
 	if (!sk)
 		goto no_tcp_socket;
 
+	if (sock_flag(sk, SOCK_DIRECT_TCP)) {
+		FPRINTK("Skb 0x%p hit DIRECT_TCP socket 0x%p\n", skb, sk);
+		if (sk->sk_state != TCP_LISTEN) {
+			if (!sk->sk_rcv_dst) {
+				sk->sk_rcv_dst = skb_dst(skb);
+				dst_hold(sk->sk_rcv_dst);
+				FPRINTK("Record dst 0x%p[%u] on the direct TCP socket 0x%p\n", skb_dst(skb), atomic_read(&skb_dst(skb)->__refcnt), sk);
+			} else {
+				FPRINTK("Dst 0x%p[%u] is already recorded on direct TCP socket 0x%p\n", sk->sk_rcv_dst, atomic_read(&sk->sk_rcv_dst->__refcnt), sk);
+			}
+		} else {
+			FPRINTK("Skb 0x%p skip listen socket 0x%p\n", skb, sk);
+		}
+	} else {
+		FPRINTK("Skb 0x%p hit common socket 0x%p\n", skb, sk);
+	}
+
 process:
 	if (sk->sk_state == TCP_TIME_WAIT)
 		goto do_time_wait;
